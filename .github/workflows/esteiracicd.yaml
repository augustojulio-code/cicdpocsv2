name: Java CI with Maven

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master","develop" ]

permissions:
  contents: read
  id-token: write

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Run unit tests
        run: mvn test

  build:

    runs-on: ubuntu-latest
    needs: unit-test
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Build Project
      run: mvn package

    - name: Publish artifact
      uses: actions/upload-artifact@v4
        with:
          name: app
          path: target/*.jar

    - name: List files after build
      run: ls -la target

    - name: Verify JAR file exists
      run: |
          if [ ! -f target/pocscicd-0.0.1-SNAPSHOT.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

    - name: Build Image Docker
      run: docker build -t apiola:latest .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-1

    # - name: Check Repository Exists
    #   id: check_repo
    #   run: |
    #     if aws ecr describe-repositories --repository-names apiola --region us-east-1; then
    #       echo "repo-exists=true" >> $GITHUB_ENV
    #     else
    #       echo "repo-exists=false" >> $GITHUB_ENV
    #     fi

    # - name: Create a Repository
    #   if: env.repo-exists == 'false'
    #   run: |
    #     aws ecr --region us-east-1 create-repository --repository-name apiola

    # - name: Login to ECR
    #   run: |
    #     aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

    # - name: Tag Docker Image
    #   run: |
    #     docker tag apiola:latest ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com/apiola:apiolav2

    # - name: Docker push
    #   run: |
    #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/apiola:apiolav2
  
    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
          -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var="aws_region=us-east-1"
     
    - name: List files
      run: ls -la target

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app
      - name: Publish artifact
        run: echo "Artifact published"

  deploy-test:
    runs-on: ubuntu-latest
    needs: publish
    if: github.ref == 'refs/heads/develop'
    environment: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app
      - name: Deploy to Test
        run: echo "Deploying to Test environment"
                  
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/develop'
    #  run: |
    #    terraform apply \
    #      -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
    #      -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
    #      -var="aws_region=us-east-1" \
    #      -auto-approve